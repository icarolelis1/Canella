/* Copyright (c) 2021, Sascha Willems
 *
 * SPDX-License-Identifier: MIT
 *
 */

#version 450
#extension GL_EXT_mesh_shader : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 124) out;

#include "common.glsl"

struct Task
{
    Meshlet meshlets[32];
};

taskPayloadSharedEXT Task IN;


layout (set = 0 ,binding = 0) uniform UBO 
{
	mat4 projection;
	mat4 model;
	mat4 view;
} ubo;

layout(set = 1 ,binding = 0, std430) readonly buffer vertex_buffer
{
	vec3 vertices[];
};

layout(set = 1 ,binding = 1, std430) readonly buffer index_ssbo
{
	uint indices[];
};


// layout(push_constant) uniform constants{
// 	uint id;
// }push;


void main()
{
	uint ti = gl_LocalInvocationID.x;
    uint mgi = gl_WorkGroupID.x;    
    uint mi = mgi * 32 + ti;

	uint vertex_count = uint(IN.meshlets[mi].vertex_count);
    uint triangle_count = uint(IN.meshlets[mi].triangle_count);

	uint data_offset = IN.meshlets[mi].data_offset;
    uint vertexOffset = data_offset;
    uint indexOffset = data_offset + vertex_count;
	
	for(uint i = 0 ; i < vertex_count; i+=32){

	}
	// mat4 mvp = ubo.projection * ubo.view * ubo.model;

	// for(uint i = 0 ; i < GPU_INDICES_PER_PRIMITIVE; i++){
	// 	uint curr_vertex = indices[index_base_id + i];
	// 	gl_MeshVerticesEXT[vertex_base_id].gl_Position = mvp * vec4(vertices[curr_vertex],1);
	// 	gl_PrimitiveTriangleIndicesEXT[vertex_base_id + i] = vertex_base_id + i ;
	// }

	 if(gl_LocalInvocationID.x == 0 ){
	 	SetMeshOutputsEXT(32, 1);
	}
	// uint iid = gl_LocalInvocationID.x;

	// vec4 offset = vec4(0.0, 0.0, gl_GlobalInvocationID.x, 0.0);

	// SetMeshOutputsEXT(3, 1);
	// mat4 mvp = ubo.projection * ubo.view * ubo.model;
	// gl_MeshVerticesEXT[0].gl_Position = mvp * (positions[0] + offset);
	// gl_MeshVerticesEXT[1].gl_Position = mvp * (positions[1] + offset);
	// gl_MeshVerticesEXT[2].gl_Position = mvp * (positions[2] + offset);
	// vertexOutput[0].color = colors[0];
	// vertexOutput[1].color = colors[1];
	// vertexOutput[2].color = colors[2];
	// gl_PrimitiveTriangleIndicesEXT[gl_LocalInvocationIndex] =  uvec3(0, 1, 2);
}
