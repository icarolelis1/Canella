#version 450
#extension GL_EXT_shader_16bit_storage: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_EXT_mesh_shader : require
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : require
#extension GL_GOOGLE_include_directive: require
#extension GL_ARB_shader_draw_parameters: require

#include "common.glsl"


const float pi_half = 1.57079;

layout(local_size_x = 32 ,local_size_y = 1 , local_size_z = 1 ) in;


layout (set = 0 ,binding = 0) uniform UBO 
{
	mat4 view_projection;
	vec4 eye;
} ubo;

layout(std430,set = 1 ,binding = 0) readonly  buffer Model_Matrices
{
	mat4 model_matrices[];
};


layout(set = 2 ,binding = 0)readonly  buffer Meshlets
{
	Meshlet meshlets[];
};

layout(set = 2 ,binding = 2)readonly  buffer Bounds
{
	MeshletBound bounds[];
};

layout( set = 2 ,binding = 5) readonly buffer MeshDrawCommand
{
	IndirectDrawDispatch draw_commands[];
};

layout( set = 2 ,binding = 6) readonly buffer MeshData
{
	StaticMeshData static_meshes[];
};


struct Task
{
   uint meshletIndices[32];
};

taskPayloadSharedEXT Task OUT;

bool cone_cull(vec3 cone, vec3 view_dir,float cutoff)
{
   return dot(cone.xyz,view_dir) >= cutoff;  
}

void main()
{
   StaticMeshData mesh_data = static_meshes[draw_commands[gl_DrawIDARB].draw_id];
   uint mgi = gl_WorkGroupID.x;   
   uint ti = gl_LocalInvocationID.x; 
   uint mi = mgi * 32 + ti;
   uint thread_meshlet = mi + mesh_data.meshlet_offset ;
   
  MeshletBound bound = bounds[thread_meshlet];
  vec3 cone_apex = bound.cone_apex.xyz;
  vec4 cone =  model_matrices[mesh_data.mesh_id]*vec4(cone_apex.xyz/127.f,1);
  vec4 cone_axis = model_matrices[mesh_data.mesh_id]* bound.cone_axis/127.f;
  vec3 direction = normalize( cone.xyz - ubo.eye.xyz);
  bool accept = !cone_cull(cone_axis.xyz,direction,bound.cone_cutoff.x);
   
   uvec4 ballot = subgroupBallot(accept);
   uint count = subgroupBallotBitCount(ballot);
   uint index = subgroupBallotInclusiveBitCount(ballot);

   if(accept)
   {
      OUT.meshletIndices[ti] = thread_meshlet ;
   }
      

   if( ti == 0 );
          EmitMeshTasksEXT(count, 1, 1);   

   // if( ti == 0 );
   //        EmitMeshTasksEXT(min(32,command.meshlet_count - mi ), 1, 1);   
}
