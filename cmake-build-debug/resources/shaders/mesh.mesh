/* Copyright (c) 2021, Sascha Willems
 *
 * SPDX-License-Identifier: MIT
 *
 */

#version 450
#extension GL_EXT_mesh_shader : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 64, max_primitives = 124) out;

#include "common.glsl"

struct Task
{
    uint meshlets[32];
};
taskPayloadSharedEXT Task IN;


layout (set = 0 ,binding = 0) uniform UBO 
{
	mat4 projection;
	mat4 model;
	mat4 view;
} ubo;

layout(set = 1 ,binding = 0, std430) readonly buffer meshlets_data
{
	Meshlet meshlets[];
};

layout(set = 1 ,binding = 1, std430) readonly buffer vertex_buffer
{
	vec3 vertices[];
};

layout(set = 1 ,binding = 2, std430) readonly buffer index_ssbo
{
	uint indices[];
};


void main()
{
	uint ti = gl_LocalInvocationID.x;
    uint mgi = gl_WorkGroupID.x;    
    uint mi = mgi * 32 + ti;


	Meshlet meshlet = meshlets[IN.meshlets[mgi]];
	mat4 model = ubo.model;
	if( ti < meshlet.vertex_count   )
	{
		uint vertex_indice = indices[meshlet.vertex_offset + ti];
		gl_MeshVerticesEXT[ti].gl_Position = model*vec4(vertices[vertex_indice],1);
	}

	if (ti < meshlet.primitive_count)
	{
		gl_PrimitiveTriangleIndicesEXT[ti] = uvec3(	indices[meshlet.primitive_offset  + 0],
													indices[meshlet.primitive_offset  + 1],
													indices[meshlet.primitive_offset  + 2]) ;
	}

	 if(gl_LocalInvocationID.x == 0 )
	 {
	 	SetMeshOutputsEXT(meshlet.vertex_count, meshlet.primitive_count);
	 }
}

